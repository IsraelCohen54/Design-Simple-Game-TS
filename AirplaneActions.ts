// import { DrawableMovableObject } from './DrawableMovableObject';
import { AirplaneData } from './AirplaneData';


const PARASHUTES_AVG_NUM_PER_FLIGHT: number = 3;
const NO_NEW_PARASHUTES: number = -1;

export class AirplaneActions {
    private _canvasWidth: number;
    private _airplaneData: AirplaneData;

    constructor(airplaneData: AirplaneData, canvasWidth: number) {
    this._airplaneData = airplaneData;
    this._canvasWidth = canvasWidth;
    }

    public move(): void {
        // Airplane-specific movement logic:
        // Check for wrapping around if left movement would go off-screen
        if (this._airplaneData.x - this._airplaneData.movementSpeed < (-this._airplaneData.width)) {
          // Wrap around to the right side of the screen
          this._airplaneData.x = this._canvasWidth;
        } else {
          // Update x normally
          this._airplaneData.x -= this._airplaneData.movementSpeed;
        }
    }

    public draw(ctx: CanvasRenderingContext2D): void {
    this._airplaneData.draw(ctx); 
    }

    /**
	Parashutes Location Generator logic:
	Generated by Probability, based on flight speed and canvas width, and 3 in avg parashutes per 1 flight
	meaning, assuming speed of 1 grid, and 1024 grids (canvas width), than 1/1024 chance per flying 1 grid toward left,
	cumulatively - 1 parashute per flight, so multiplay by 3 = 3 per flight ( = PARASHUTES_AVG_NUM_PER_FLIGHT),
	multi by flight speed - as e.g. speed is 2, it would pass
	canvas *2  faster, hence need higher change as well to generate parashute, in other words, *2 means, canvas width/2 so it would keep 
	the same ratio.
	That said, using weighted probability to calc it.
    */
    public isParashuteJumpedAtLocation(): number { 
        const generateProbability = (PARASHUTES_AVG_NUM_PER_FLIGHT * this._airplaneData.movementSpeed) / this._canvasWidth; 
 	const complementaryProbability = 1 - generateProbability; // Probability of not generating

  	// Use Math.random() for weighted random decision
  	const generateParachute = Math.random() < generateProbability;

        if (generateParachute) {
   	    return this._airplaneData.x; // Return airplane's X-axis position if parachute generated
        } else {
	    return NO_NEW_PARASHUTES; // Return (-1) if no parachute generated
	}
    } 
}